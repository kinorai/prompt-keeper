#https://github.com/orgs/community/discussions/26724
name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]
  # Manual triggers for testing
  workflow_dispatch:

env:
  REGISTRY_IMAGE: kinorai/prompt-keeper

jobs:
  # Setup job - checkout code, setup Node.js, install dependencies
  setup:
    name: Setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # First try to restore the cache
      - name: Restore node_modules cache
        id: cache-node-modules-restore
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}

      # Only run npm ci if cache doesn't exist
      - name: Install dependencies
        if: steps.cache-node-modules-restore.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      # Save the cache if we had to install dependencies
      - name: Save node_modules cache
        if: steps.cache-node-modules-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}

  # Lint job - run all linting tasks
  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # Restore cached node_modules
      - name: Restore node_modules
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}

      # Commit linting - skip for dependabot
      - name: Validate current commit (last commit) with commitlint
        if: github.event_name == 'push' && github.actor != 'dependabot[bot]'
        run: npx commitlint --last --verbose

      - name: Validate PR commits with commitlint
        if: github.event_name == 'pull_request' && github.actor != 'dependabot[bot]'
        run: npx commitlint --from ${{ github.event.pull_request.base.sha }} --to ${{ github.event.pull_request.head.sha }} --verbose

      # Code quality checks
      - name: Check formatting
        run: npx prettier --check "src/**/*.{ts,tsx,js,jsx,json,css}"

      - name: Run linting
        run: npm run lint

      - name: Type check
        run: npx tsc --noEmit

  # Test job - run tests
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # Restore cached node_modules
      - name: Restore node_modules
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Run tests
        run: npm run test
  versioning:
    name: Versioning
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    permissions:
      contents: write
    outputs:
      skipped: ${{ steps.changelog.outputs.skipped }}
      version: ${{ steps.changelog.outputs.tag }}

    steps:
      - name: Checkout main branch with full history
        uses: actions/checkout@v4
        with:
          ref: 'main'
          fetch-depth: 0

      - name: Conventional Changelog Action
        id: changelog
        uses: TriPSs/conventional-changelog-action@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build Platform-Specific Images
    runs-on: ${{ matrix.platform == 'linux/arm64' && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    needs: [test]
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            # PR builds - validation tag (not pushed)
            type=ref,event=pr
            # Develop branch - 'dev' tag
            type=raw,value=dev,enable=${{ github.ref_name == 'develop' }}
            # Main branch - 'latest' tag
            type=raw,value=latest,enable=${{ github.ref_name == 'main' }}
            # Releases - semantic version tags
            type=semver,pattern={{version}},enable=${{ github.event_name == 'release' }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ github.event_name == 'release' }}
            type=semver,pattern={{major}},enable=${{ github.event_name == 'release' }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          # Don't tag individual platform builds - tags will be applied in merge step
          outputs: ${{ github.event_name != 'pull_request' && 'type=image,push-by-digest=true,name-canonical=true,push=true' || 'type=docker' }}
          cache-from: type=gha,scope=buildkit-${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=buildkit-${{ matrix.platform }}

      - name: Export digest
        if: github.event_name != 'pull_request'
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    name: Merge and Push Multi-Platform Image
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    needs:
      - build
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            # PR builds - validation tag (not pushed)
            type=ref,event=pr
            # Develop branch - 'dev' tag
            type=raw,value=dev,enable=${{ github.ref_name == 'develop' }}
            # Main branch - 'latest' tag
            type=raw,value=latest,enable=${{ github.ref_name == 'main' }}
            # Releases - semantic version tags
            type=semver,pattern={{version}},enable=${{ github.event_name == 'release' }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ github.event_name == 'release' }}
            type=semver,pattern={{major}},enable=${{ github.event_name == 'release' }}

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
