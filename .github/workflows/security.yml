name: Security Scanning

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sundays

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # First try to restore the cache
      - name: Restore node_modules cache
        id: cache-node-modules-restore
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}

      # Only run npm ci if cache doesn't exist
      - name: Install dependencies
        if: steps.cache-node-modules-restore.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      # Save the cache if we had to install dependencies
      - name: Save node_modules cache
        if: steps.cache-node-modules-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Run npm audit
        run: npm audit --omit=dev --audit-level=high

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, typescript

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # First try to restore the cache
      - name: Restore node_modules cache
        id: cache-node-modules-restore
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}

      # Only run npm ci if cache doesn't exist
      - name: Install dependencies
        if: steps.cache-node-modules-restore.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      # Save the cache if we had to install dependencies
      - name: Save node_modules cache
        if: steps.cache-node-modules-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Build application
        run: npm run build

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  docker-scan:
    name: Docker Image Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'  # Only run on main branch pushes and scheduled runs
    needs: dependency-scan  # Ensure this runs after dependency scan
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull Docker image
        run: docker pull kinorai/prompt-keeper:latest

      - name: Run Docker Scout
        uses: docker/scout-action@v1
        with:
          command: quickview,cves,recommendations
          image: kinorai/prompt-keeper:latest
          dockerhub-user: ${{ secrets.DOCKERHUB_USERNAME }}
          dockerhub-password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: kinorai/prompt-keeper:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          wait-for-processing: true
